@layer components {
  /* Instead of styling #root in CSS, you may prefer to add these classes directly to your container.
     But if you need a reusable class, you can define one like "app-container": */
  .app-container {
    @apply max-w-[1280px] mx-auto p-8 text-center;
  }

  /* Logo Component Styles
     Rather than using a "logo" class with fixed pixel values, we use Tailwind utilities via @apply.
     You may still need to write custom rules for filter effects. */
  .logo {
    @apply h-24 p-6; /* 6em roughly equals 24 (if base is 4px scale); adjust if needed */
    will-change: filter;
    transition: filter 300ms;
  }
  .logo:hover {
    /* Tailwind doesn't include a drop-shadow utility with custom values by default,
       so we keep this rule here */
    filter: drop-shadow(0 0 2em #646cffaa);
  }
  .logo.react:hover {
    filter: drop-shadow(0 0 2em #61dafbaa);
  }

  /* Keyframes for logo-spin.
     You could also define this in your tailwind.config.js as a custom animation.
     For now, we leave it in the CSS file. */
  @keyframes logo-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Applying animation under a media query.
     Ideally, you’d apply the animation directly in your component using Tailwind’s
     extended animation classes (see tailwind.config.js), but here’s an example if you’d prefer CSS. */
  @media (prefers-reduced-motion: no-preference) {
    a:nth-of-type(2) .logo {
      animation: logo-spin infinite 20s linear;
    }
  }

  /* Card Component Styles
     Again, you can apply padding directly in your markup.
     This class gives a card padding of 2em (which roughly corresponds to Tailwind's p-8 if needed). */
  .card {
    @apply p-8;
  }

  /* Read-the-docs text color.
     You might instead simply apply a Tailwind class like text-gray-500 directly in JSX. */
  .read-the-docs {
    color: #888;
  }
}
